启动/停止/重启MySQL

一、启动方式

1、使用 service 启动：service mysqld start

2、使用 mysqld 脚本启动：/etc/init.d/mysqld start

3、使用 safe_mysqld 启动：safe_mysqld&

二、停止

1、使用 service 启动：service mysqld stop

2、使用 mysqld 脚本启动：/etc/init.d/mysqld stop

3、 mysqladmin shutdown

三、重启

1、 使用 service 启动：service mysqld restart

2、使用 mysqld 脚本启动：/etc/init.d/mysqld restart

TPS：每秒传输的事物处理个数，服务器每秒处理的事务数
QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准
对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力

QPS与TPS的区别是什么呢？

举个栗子：假如一个大胃王一秒能吃10个包子，一个女孩子0.1秒能吃1个包子，那么他们是不是一样的呢？
答案是否定的，
因为这个女孩子不可能在一秒钟吃下10个包子，她可能要吃很久。这个时候这个大胃王就相当于TPS，而这个女孩子则是QPS。虽然很相似，但其实是不同的

系统吞吐量要素：

一个系统的吞吐量（承压能力）与request对CPU的消耗、外部接口、IO等等紧密关联。单个reqeust 对CPU消耗越高，外部系统接口、IO影响速度越慢，系统吞吐能力越低，反之越高。

系统吞吐量几个重要参数：QPS（TPS）、并发数、响应时间

QPS（TPS）：每秒钟request/事务 数量

并发数： 系统同时处理的request/事务数

响应时间： 一般取平均响应时间

最好不要在主库上进行备份 ------------

影响因素：
1、SQL查询速度
2、服务器硬件
3、网卡流量
4、磁盘I/O

一、超高的QPS和TPS
风险：效率低下的SQL
大部分的慢查询都可以通过sql的优化来解决问题

二、大量的并发和超高的CPU使用率
风险：
大量的并发：
    数据库连接数被占满
    并发量：同一时刻需要数据库服务器需要处理请求数的连接数量
    连接量：比并发量多得多（Nginx,Apach）,大部分的都是sleep状态
    mysql中所允许建立的连接数：max_connections配置（默认100）生产服务器可以改的大一些
超高的cpu使用率：因CPU资源耗尽而出现宕机

三、磁盘IO
风险：
磁盘IO性能突然下降（使用更快的磁盘设备）
其他大量消耗磁盘性能的（计划任务，做好磁盘维护）

四、网卡流量
如何避免无法连接数据库的情况
1、减少从服务器的数量 （因为从服务器要去主服务器上复制日志，从服务器越多，流量就越大）
2、进行分级缓存 （防止前端缓存失效，对服务器造成很大的冲击）
3、避免使用select * 进行查询（查询出没有必要的列也会浪费大量的流量）
4、分离业务网络和服务器网络 （。。。）

五、大表
定义：
1、记录行数巨大，单表超过千万行
2、表数据文件巨大，表数据文件超过10G

大表对查询的影响：
    慢查询：很难在一定的时间内过滤出所需要的数据
大表对DDL操作的影响：
风险：
   一、  Mysql版本<5.5建立索引会锁表
        Mysql版本>=5.5虽然不会锁表，但会引起主从延迟（因为mysql的复制机制是现在主库上进行，再复制到从库，造成长时间的主从延迟，从而影响正常的业务）
        所以，在大表上建立索引需要小心
   二、 修改表结构需要长时间锁表（锁表）
        会造成长时间的主从延迟 （虽然在mysql5.6版本中支持了多线程复制）
        影响正常的数据库操作 （如插入数据受到阻塞，使数据库的连接数很快被占满，服务器会出现500错误）

如何处理数据库中的大表：----------
1、分库分表，把一张大表分成多个小表  （并不适合所有公司进行，需要消耗大量的人力和物力）
难点：
    分表主键的选择
    分表后跨分区数据的查询和统计 （好的分区键只能尽量避免跨分区操作）
2、大表的历史数据归档 （减少对前后端业务的影响，前端最多增加一个历史数据查询的接口）
    历史数据可以放在其他的服务器，减少热数据所在服务器的表容量，也减少了核心服务器的查询压力
难点：
    归档时间点的选择（不会使用或很少使用的数据）
    如何进行归档操作

什么是事务：------------------------------
1、事务是数据库系统区别于其他一切文件系统的重要特性之一
2、事务是一组具有原子性的SQL语句，或是一个独立的工作单元（要么全部完成，要么全部失败）
事务特性：  http://www.cnblogs.com/zhoujinyi/p/3437475.html
    原子性：不可分割的最小单元，要么全部成功，要么全部失败 （如：转账）
    一致性：事务数据库从一种一致性状态转换到另一种一致性状态，在事物开始前和结束后数据库中数据完整性没有被破坏（如：转账前后的总金额不变）
    隔离性：一个事务对数据库中数据的修改，在未提交完成前对于其他事务是不可见的
        show variables like '%iso%'
        未提交读（不建议）、已提交读（大多数据库支持，mysql除外）、可重复读(当前连接事物改变的数据，其他连接不可获取)、
        可串行化（隔离级别最高，读取的每一行都加锁），隔离性由低到高，并发性由高到底
    持久性：一旦事务提交，其所做的修改就会永远保存到数据库中，即使系统崩溃，已经提交的修改数据也不会丢失（相对于数据库来说，数据不会丢失）

真正保证数据不丢失，只有靠数据备份，主从复制这种高可用架构了

什么是大事务：----------------------
定义：运行时间比较长，操作的数据比较多的事务
风险：
    锁定太多的数据，造成大量的阻塞和锁超时
    回滚所需要时间比较长
    执行时间长，容易造成主从延迟

如何处理大事务：-------
1、避免一次处理太多的数据
2、移出不必要在事务中的SELECT操作

影响性能的因素： ---------------------------------------
一、硬件（cpu,内存，io）
二、操作系统、服务器系统
三、存储引擎
四、数据库参数配置
五、数据库结构设计和SQL语句

服务器硬件对性能的影响：
CPU密集型：更好的CPU
系统并发量：更多的CPU （web类应用并发量大）

myisam是将索引存入内存，数据在磁盘中
innodb是索引和数据都存在内存中的 ....

内存对写入和读取都会有好处，越大越好

磁盘的配置和选择： PCIE->SSD->RAID10->磁盘->SAN(优先级由高到低)
1、传统磁盘（读写慢）
2、RAID技术（将多个小磁盘组合成大磁盘，RAID0 RAID1 RAID5 RAID10）
3、固态存储（更好的随机读写性能，可以加强数据库的随机读写，更好的支持并发，但容易损坏 SSD,PCI-E SSD，使用于存在大量随机I/O的场景，解决单线程负载的I/O瓶颈）
4、网络存储SAN和NAS（数据库备份）

网络对性能的影响：
1、带宽
2、质量

Centos系统参数优化： -----------------
内核相关参数 /etc/sysctl.conf
net.ipv4.tcp_fin_timeout=10
...

Mysql体系结构：
客户端-》Mysql服务层(连接管理器，查询缓存，查询解析，查询优化器)-》存储引擎层
存储引擎是针对于表的而不是针对于库的（一个库中的不同表可以使用不同的存储引擎）

MySIAM存储引擎：
mysql5.58及之前默认的存储引擎，由MYD（数据）和MYI（索引）组成，frm（所有引擎都有的，存储表结构）
并发性和锁级别：表级锁（数据修改时整个表加锁，读取时加共享锁），读写是互斥的，对读写混合的并发性不是很好 *****
check table tablename  对表进行检查
repair table tablename 对表进行恢复

特性：
MyISAM表支持的索引类型（全文索引）
MyISAM表支持数据压缩  myisampack 强制压缩：myisampack -b -f myIsam.MYI
对读写的压缩表，只能读不能写 *****

限制：
版本<5.0默认表大小为4G（一般也不会用这个版本） >5.0为256TB
适用场景：
非事务型应用、只读类应用、空间类应用（地理位置），大多数情况还是建议用InnoDB

Innodb存储引擎： ***************************8
5.5版本后默认存储引擎
使用表空间进行数据存储，支持事务
innodb_file_per_table参数 ON:独立表空间，tablename.ibd OFF:系统表空间，ibdataX (X代表一个数字)
mysql> show variables like 'innodb_file_per_table';
+-----------------------+-------+
| Variable_name         | Value |
+-----------------------+-------+
| innodb_file_per_table | ON    |
+-----------------------+-------+
系统表空间和独立表空间要如何选择：
5.6前都是存储在系统表空间中
比较：
系统表空间无法简单的收缩文件大小(很浪费空间，造成大量磁盘碎片，影响系统性能)，产生IO瓶颈
独立表空间可以通过optimize table命令收缩系统文件（只从建单表），可以同时向多个文件刷新数据
建议： ************
对Innodb使用独立表空间 （5.6后默认）

把原来存于系统表空间中的表转移到独立表空间的方法： **
1、使用mysqldumo导出所有数据库数据
2、停止Mysql服务，重建参数，并删除Innodb相关文件
3、重启mysql服务，重建Innodb系统表空间
4、重新导入数据
转移后系统表空间中还存储有Innodb数据字典信息、Undo回滚段

Innodb存储引擎的特性
    Innodb是一种事务性存储引擎
    完全支持事务的ACID特性
    Redo Log(重做日志，实现持久性，帮助已提交事务，顺序写入，存储已提交事务)和Undo Log（存储未提交事务，回滚日志，帮助未提交事务，随机写入）
    Redo Log，Undo Log 实现了事务的4大特性 *****
    Innodb支持行级锁，行级锁可以最大程度支持并发，行级锁是由存储引擎层实现的

innodb状态检查：
show engine innodb status\G;

show variables like 'innodb_log_buffer_size';  //查看日志缓冲区
+------------------------+---------+
| Variable_name          | Value   |
+------------------------+---------+
| innodb_log_buffer_size | 2097152 |
+------------------------+---------+

什么是锁：
锁的主要作用是管理共享资源的并发访问
锁用于实现事务的隔离性

锁类型：
共享锁（读锁），多个线程可以同时进行
独占锁（写锁）
例子：
create table `myinnodb`(`id` int(11),`c1` varchar(30)) engine = innodb;
//插入数据
insert into myinnodb values(2,'bb'),(3,'cc');
select * from myinnodb;
+------+------+
| id   | c1   |
+------+------+
|    2 | bb   |
|    3 | cc   |
//加一个独占锁
begin(启动事务) ***********8
update myinnodb set c1='bbbb' where id =2;
在其他连接中查看相同行的情况：
select * from myinnodb where id = 2; 可以看到c1还是为bb，并不是为bbbb  ***********

锁的粒度：
表级锁：开销小，并发性低，有写操作，就会阻塞其他的读写，只有没有写操作，可以多个读，（服务层实现 ******）
行级锁：
innodb支持，但是没有使用到索引的时候，还是会用到表级锁  **********

lock table myinnodb write; （给这个innodb表加上了表级的独占锁）
unlock tables;（解锁）
具体查看：https://blog.csdn.net/TBWood/article/details/79004523

阻塞和死锁： **************88
什么是阻塞：阻塞事务占用了被阻塞事务的资源，确保事务可以并发正确运行，大量阻塞表明可能出现了慢查询，造成数据库连接大量堆积，造成性能下降
死锁：相互占用对方的资源，可按事务处理顺序，索引等来解决


show engine innodb status\G;  ****************************
*************************** 1. row
Type: InnoDB
Name:
Status:
=====================================
2018-12-07 10:01:16 0x7f091083d700 INNODB MONITOR OUTPUT
=====================================
Per second averages calculated from the last 46 seconds   （最近46秒的统计信息）
Log sequence number 2535837
Log flushed up to   2535837
Pages flushed up to 2535837
Last checkpoint at  2535828
0 pending log flushes, 0 pending chkp writes
53 log i/o's done, 0.00 log i/o's/second
----------------------
BUFFER POOL AND MEMORY
----------------------
Total large memory allocated 68714496
Dictionary memory allocated 342967
Buffer pool size   4095
Free buffers       3791
Database pages     304
Old database pages 0
Modified db pages  0
Pending reads      0
Pending writes: LRU 0, flush list 0, single page 0
Pages made young 0, not young 0
0.00 youngs/s, 0.00 non-youngs/s
Pages read 261, created 43, written 90   **************************读多少，写多少等
0.00 reads/s, 0.00 creates/s, 0.00 writes/s
No buffer pool page gets since the last printout
Pages read ahead 0.00/s, evicted without access 0.00/s, Random read ahead 0.00/s
LRU len: 304, unzip_LRU len: 0
I/O sum[0]:cur[0], unzip sum[0]:cur[0]

Innodb使用场景: ***************************************
适用于大多数OLTP应用，5.7版本后也支持全文索引和空间索引了

CSV存储引擎：
数据以文本方式存储在文件中，不支持索引，不适合大表，可对数据文件之间编辑，不支持为NULL，每列都为not null
create table `mycsv` (
    `id` int(11) not null,
    `c1` varchar(10) not null,
    `c2` char(10) not null
) ENGINE=CSV;
insert into mycsv values(1,'aaa','bbb'),(2,'ccc','ddd');
root@instance-20ixr948 mysql]# cd /data/mysql   (在mysql数据存储目录下)
[root@instance-20ixr948 mysql]# ls
auto.cnf        ibdata1      ib_logfile1  ibtmp1  mysql-bin.000001  mysql-bin.000003  mysqld_safe.pid  mysql.pid       performance_schema  test
ib_buffer_pool  ib_logfile0  ib_logfile2  mysql   mysql-bin.000002  mysql-bin.index   mysql-error.log  mysql-slow.log  sys
[root@instance-20ixr948 mysql]# ls
auto.cnf        ibdata1      ib_logfile1  ibtmp1  mysql-bin.000001  mysql-bin.000003  mysqld_safe.pid  mysql.pid       performance_schema  test
ib_buffer_pool  ib_logfile0  ib_logfile2  mysql   mysql-bin.000002  mysql-bin.index   mysql-error.log  mysql-slow.log  sys
[root@instance-20ixr948 mysql]# ls
auto.cnf        ibdata1      ib_logfile1  ibtmp1  mysql-bin.000001  mysql-bin.000003  mysqld_safe.pid  mysql.pid       performance_schema  test
ib_buffer_pool  ib_logfile0  ib_logfile2  mysql   mysql-bin.000002  mysql-bin.index   mysql-error.log  mysql-slow.log  sys
[root@instance-20ixr948 mysql]# cd test  （在test目录中）
[root@instance-20ixr948 test]# ls   （出现了mycsv表的）
db.opt  mycsv.CSM  mycsv.CSV  mycsv.frm  myinnodb.frm  myinnodb.ibd

[root@instance-20ixr948 test]# more mycsv.CSV
1,"aaa","bbb"
2,"ccc","ddd"
[root@instance-20ixr948 test]# vim mycsv.CSV  （可以直接更新表内容）
flush tables;  刷新下表
select * from mycsv;  id=3为自己vim改的
+----+-----+-----+
| id | c1  | c2  |
+----+-----+-----+
|  1 | aaa | bbb |
|  2 | ccc | ddd |
|  3 | eee | ddd |
+----+-----+-----+
适用场景：
适合做为数据交换的中间表

Archive存储引擎： ******
以zlib对表数据进行压缩，磁盘I/O更少,比myisam，innodb更加节约存储空间
数据存储在ARZ为后缀的文件中
引擎特点： ****
只支持insert和select操作，支持行级锁和专用的缓冲区。可以实现高并发的插入。
只允许在自增ID列上加索引
create table myarchive(
    id int auto_increment not null,
    c1 varchar(10),
    c2 char(10),
    key(id)
) engine = archive;

查看myarchive表信息 *****
cd /data/mysql/test
ls -lh myarchive.*
-rw-r----- 1 mysql mysql 8.5K Dec 11 07:59 myarchive.ARZ
-rw-r----- 1 mysql mysql 8.5K Dec 11 07:59 myarchive.frm  (表结构文件)

插入数据：
insert into myarchive(c1,c2) values('aa','bb'),('cc','dd');
查询数据：
select * from myarchive;
+----+------+------+
| id | c1   | c2   |
+----+------+------+
|  1 | aa   | bb   |
|  2 | cc   | dd   |
删除数据：(报错，说明不能删除)
delete from myarchive where id=1;
ERROR 1031 (HY000): Table storage engine for 'myarchive' doesn't have this option

更新操作：(报错，说明不能更新)
update myarchive set c1='aaaa' where id =1;
ERROR 1031 (HY000): Table storage engine for 'myarchive' doesn't have this option

建立索引：(报错，只能在自增列上建立一个索引)
create index idx_c1 on myarchive(c1);
ERROR 1069 (42000): Too many keys specified; max 1 keys allowed

使用场景： ***
日志和数据采集类应用 （个人认为，比较适合日志）

-----------------------------------------------Memory存储引擎：-------------------------------------------
文件系统存储特点：
也称HEAP存储引擎，所以数据保存在内存中，数据库重启，表中的数据都会消失，表结构会保留下来
功能特点：
支持HASH索引和BTree索引（默认为HASH索引） ***
HASH索引做等值查询，做范围查询不能用HASH索引，范围查找用BTree索引。
所有字段都为固定长度 varchar(10)=char(10) **
不支持BLOG和TEXT等大字段
引擎使用表级锁，在繁忙的系统中，性能也不一定比innodb好，innodb也会把需要的数据和索引缓存在内存中，innodb访问热数据的话
也会从内存中读取，且使用的行级锁，比memory支持更大的并发，吞吐量更高
最大大小由max_heap_table_size参数决定（默认值为16M，修改对已存在的表无效，必须重建才能生效）
create table mymemory(
    id int,
    c1 varchar(10),
    c2 char(10)
) engine=memory;

表文件（只有表数据结构文件）
ls -lh mymemory.*
-rw-r----- 1 mysql mysql 8.5K Dec 11 08:25 mymemory.frm
建立索引：
create index idx_c1 on mymemory(c1); (普通索引)
create index idx_c2 using btree on mymemory(c2); (btree索引)

显示索引类型： -----
show index from mymemory\G;
*************************** 1. row ***************************
Table: mymemory
Non_unique: 1
Key_name: idx_c1
Seq_in_index: 1
Column_name: c1
Collation: NULL
Cardinality: 0
Sub_part: NULL
Packed: NULL
Null: YES
Index_type: HASH  （HASH索引）
Comment:
Index_comment:
*************************** 2. row ***************************
Table: mymemory
Non_unique: 1
Key_name: idx_c2
Seq_in_index: 1
Column_name: c2
Collation: A
Cardinality: NULL
Sub_part: NULL
Packed: NULL
Null: YES
Index_type: BTREE  （BTREE索引）
Comment:
Index_comment:

查看表的状态信息：
show create table mymemory\G;
*************************** 1. row ***************************
Table: mymemory
Create Table: CREATE TABLE `mymemory` (
`id` int(11) DEFAULT NULL,
`c1` varchar(10) DEFAULT NULL,
`c2` char(10) DEFAULT NULL,
KEY `idx_c1` (`c1`),               (普通索引)
KEY `idx_c2` (`c2`) USING BTREE   （BTREE）
) ENGINE=MEMORY DEFAULT CHARSET=utf8mb4

容易混淆的概念：---------------------------
memory存储引擎表和临时表
临时表：
1、系统使用的临时表（查询优化器优化时使用的，内部临时表），超过限制使用Myisam临时表，未超过限制使用Memory表
2、create temporary table 建立的临时表，只对当前session可见，可以使用任何的存储引擎
memory存储引擎表，对所用系统可见，并不是临时表

使用场景：Memory数据易丢失，要求数据可再生 **********************
用于查找或者映射表，例如邮编和地区的对应表
用于保存数据分析中产生的中间表
用于缓存周期性聚合数据的结果表

----------------------------------------------------Federated存储引擎（默认禁止）-----------------------------------
特点：
提供了访问远程Mysql服务器上标的方法
每次访问Federated存储引擎表的时候，查询数据都会被发送到远程服务器执行
本地不存储数据，数据全部放到远程服务器上
本地需要保存表结构和远程服务器的连接信息

如何使用：
默认禁止，启用需要在启动时增加federated参数（这里就不贴出来了）
mysql://user_name[:password]@host_name[:port_num]/db_name/tbl_name

查看引擎：show engines;   （FEDERATED不支持）
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |

开启federated引擎支持：
cd /etc; vim my.cnf
[mysqld]
federated=1

重启mysql:
/etc/init.d/mysqld restart
Shutting down MySQL....                                    [  OK  ]
Starting MySQL..                                           [  OK  ]

再次查看，show engines; （FEDERATED存储引擎已经被支持）
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| FEDERATED          | YES     | Federated MySQL storage engine                                 | NO           | NO   | NO         |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+

创建一个远程库：（模拟）
create database remote;
Query OK, 1 row affected (0.00 sec)

创建一个表：
use remote;
create table remote_fed(
    id int auto_increment not null,
    c1 varchar(10) not null default '',
    c2 char(10) not null default '',
    primary key(id)
) engine=innodb;

插入数据：
insert into remote_fed(c1,c2) values('aaa','bbb'),('ccc','ddd'),('eee','fff');
查询数据：
select * from remote_fed;
+----+-----+-----+
| id | c1  | c2  |
+----+-----+-----+
|  1 | aaa | bbb |
|  2 | ccc | ddd |
|  3 | eee | fff |

//给远程连接用户的权限 **************************（其实是在本地不同库做的演示）
grant select,update,insert,delete on remote.remote_fed to fred_link@'127.0.0.1' identified by 'Caoyi260027!';

//切换到本地
use test;
//保存数据结构和连接信息
create table remote_fed(
    id int auto_increment not null,
    c1 varchar(10) not null default '',
    c2 char(10) not null default '',
    primary key(id)
) engine=federated connection='mysql://fred_link:Caoyi260027!@127.0.0.1:3306/remote/remote_fed';
//重命名表
rename table remote_fed to loacal_fed;

//本地查询 （和远程数据时一样的）
select * from test.loacal_fed;
+----+-----+-----+
| id | c1  | c2  |
+----+-----+-----+
|  1 | aaa | bbb |
|  2 | ccc | ddd |
|  3 | eee | fff |
+----+-----+-----+
//删除表
delete from test.loacal_fed where id =2;
//切换到远程库
use remote;
//查询数据 select * from remote_fed; （id=2的数据被删除了）
+----+-----+-----+
| id | c1  | c2  |
+----+-----+-----+
|  1 | aaa | bbb |
|  3 | eee | fff |
+----+-----+-----+
使用场景：  （一般不会用到这种存储引擎） ********
偶尔的统计分析及手工查询

---------------------------------------如何选择正确的存储引擎-----------------------------
大多数情况下都应该使用innodb
参考条件：
    事务： innodb
    主要是select、insert操作：可以选择myisam,基本是insert操作，可以选择archive引擎
    备份：（在线热备，就只有innodb）
    崩溃恢复：（down机恢复，也应该选择innodb，myisam恢复比较慢）
    存储引擎的特有特性，最好不要混合使用一种存储引擎（无法实现完整的在线热备等） ***

--------------------------------------mysql服务器参数-----------------------------------
mysql获取配置信息路径： ----------------
1、命令行参数
    mysql_safe --datadir=/data/mysql
2、配置文件
    /etc/my.cnf (centos中)

mysql配置参数的作用域：
1、全局参数（需要在mysql客户端执行）需要退出当前session才会生效，或者在另外一个session中查看
    set global 参数名=参数值
    或 set @@global.参数名:=参数值
2、会话参数
    set [session] 参数名=参数值
    或 set @@session.参数名:=参数值
例子：
interactive_timeout针对交互式连接，wait_timeout针对非交互式连接
通过mysql客户端连接数据库是交互式连接，通过jdbc连接数据库是非交互式连接
show variables where variable_name='wait_timeout' or variable_name='interactive_timeout';
+---------------------+-------+
| Variable_name       | Value |
+---------------------+-------+
| interactive_timeout | 28800 |
| wait_timeout        | 28800 |
+---------------------+-------+
调整：
set global wait_timeout=3600;set global interactive_timeout=3600;
Query OK, 0 rows affected (0.00 sec)
在另外一个客户端连接中：（发现已经更改了）
show variables where variable_name='wait_timeout' or variable_name='interactive_timeout';
+---------------------+-------+
| Variable_name       | Value |
+---------------------+-------+
| interactive_timeout | 3600  |
| wait_timeout        | 3600  |
+---------------------+-------+

内存配置相关参数---------------------------
1、确定可以使用的内存的上限
2、确定mysql的每个连接使用的内存
下面参数每个线程都要分配的，多个连接分配多个
（sort_buffer_size(查询的时候分配)，join_buffer_size(连接缓冲区)，read_buffer_size(读缓冲区大小（4k倍数）)，
read_rnd_buffer_size(索引缓冲区大小，查询需要时分配内存)）

3、确定需要为操作系统保留多少内存（做好单独分配服务器，也不要在一台服务器上分配多个mysql实例）
4、如何为缓存池分配内存 **
innodb_buffer_pool_size(这个比较重要，定义innodb缓冲池使用内存的大小)，innodb引擎不仅要缓存索引，还要缓存数据，帮助延迟写入。。。
如果都用的是innodb引擎，调整innodb_buffer_pool_size大小需要重启服务器（5.7版本后）
innodb_buffer_pool_size = 总内存-（每个线程需要的内存*连接数）-系统保留内存

key_buffer_size(主要用于myisam引擎)，只会缓存索引，目前mysql系统表还是使用的myisam引擎
//查询myisam、innodb引擎占用索引表空间大小 **
select sum(index_length) from information_schema.tables where engine='myisam';
+-------------------+
| sum(index_length) |
+-------------------+
|             44032 |
+-------------------+
select sum(index_length) from information_schema.tables where engine='innodb';
+-------------------+
| sum(index_length) |
+-------------------+
|            180224 |
+-------------------+

I/O相关配置参数 -----------------------------------------------------------------
I/O操作的成本是很高的
Innodb I/O相关配置：
Innodb事务写入日志中（顺序写入），然后在写入磁盘，而不是直接随机写入磁盘
Innodb_log_file_size（控制单个日志文件的大小）
Innodb_log_files_in_group（控制日志文件的个数）
事务日志总大小：（最好能记录一个小时的日志量）
Innodb_log_files_in_group*Innodb_log_file_size
Innodb_log_buffer_size:控制日志缓冲区的大小（1s的缓冲量 32M或128M就够了）
Innodb_flush_log_at_trx_commit:刷新日志缓冲区的频率
0：每秒进行一次log写入cache,并flush log到磁盘，事务提交时不会做任何事情，在mysql崩溃时，至少丢失1s的事务
1（默认）：在每次事务提交时都执行log写入cache,并flush log到磁盘（最安全的），保证不会丢失任何已提交的事务
2（建议）：每次事务提交，执行log数据写入到cache，每秒执行一次flush log到磁盘，2和0的区别是，进程崩溃了，不会丢失任何提交事务，只有down机了才会

Innodb_flush_method=O_DIRECT（影响innodb如何读写数据方式） **
Innodb_file_per_table=1(控制innodb如何使用表空间，放一个表) **
Innodb_doublewrite=1(双写缓存，避免数据没写完整导致的数据损坏) **

Myisam I/O相关配置
delay_key_write(控制关键字脏块什么时候刷新到磁盘文件中)
OFF：每次写操作后刷新键缓冲中的脏块到磁盘（最安全，性能差）
ON：只对在建表时制定了delay_key_write选项的表使用延迟刷新
ALL：对所有MYISAM表都是用延迟键写入（如果服务器崩溃，有些脏块没写入，就会造成表索引损坏，这时候就要修复表了）

--------------------------------------------------安全相关配置参数------------------------------------------------
expire_logs_days 指定自动清理binlog的天数（如果打开了binlog日志的话）
max_allowed_packet控制mysql可以接收的包的大小（默认值比较小，所以最好要重新设置）
skip_name_reslve禁用DNS查找
sysdate_is_now确保sysdate()返回确定性日期
read_only（从库中禁止非super权限的用户写权限,保证主从一致）
skip_slave_start禁用slave自动恢复（系统崩溃）
sql_mode 设置mysql所使用的sql模式（不要轻易改动）
no_zero_date,no_zero_in_date等

-------------------------------------------------其他常用配置参数（在session层就可以设置）------------------------------------------------
sync_binlog 控制mysql如何向磁盘刷新binlog
默认值为0，mysql不会主动刷新数据到磁盘，而是由系统自己决定
最好设置为1（特别是主服务器），表示每次都刷新到磁盘
tmp_table_size和max_heap_table_size 控制内存临时表大小（不要设置的太大）
max_connections 控制允许的最大连接数，默认值为100，建议设置大一点

&&&-------------------------------------------------数据库设计对性能的影响----------------------------------------------
1、过分的反范式化为表建立太多的列（可以拆分到多张表中）
2、过分的范式化造成太多的表关联（最好不要关联太多的表）
3、在OLTP环境中使用不恰当的分区表
4、使用外键保证数据的完整性

性能优化顺序 ************
1、数据库结构设计和SQL语句
2、数据库存储引擎的选择和参数配置
3、系统选择及优化
4、硬件升级
























































































































































































































































