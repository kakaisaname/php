mysql复制功能能提供分担读负载，进行水平扩展，备库分担读负载 **
复制功能为高可用，灾难恢复，备份提供更多的选择
复制是基于主库上的二进制日志，所以复制是异步的，所以同一时间点上，备库上的数据和主库上的数据不一致 ***
无法保证备库与主库之间的延迟

---------------------------------------------------复制解决了什么问题--------------------------------
1、实现不同服务器上的数据分布
2、利用二进制日志增量进行，不需要太多的带宽，基于语句的复制没问题，基于行的复制在进行大批量的更改时会对带宽带来一定的压力
3、特别是在跨IDC环境下进行复制，应该分批进行
4、实现数据读取的负载均衡，利用DNS轮询的方式把程序的读连接到不同的备份数据库，使用LVS，haproxy这样的代理方式
5、增强数据安全性，利用备库的备份来减少主库负载，
复制并不能代替备份，复制之后也需要对数据进行备份
6、实现数据库高可用和故障切换
7、实现数据库在线升级

-------------------------------------------------mysql二进制日志-------------------------------------
分为mysql服务层日志，mysql存储引擎层日志（如innodb的redo_log undo_log）
mysql服务层日志：
二进制日志、慢查日志、通用日志
二进制日志（比较重要）：记录了所有对mysql数据库的修改事件，包括增删改查事件和对表结构的修改事件
可以通过binlog命令行工具对二进制的具体内容进行查看
二进制日志的格式
1、基于段的格式 binlog_format=STATEMENT (可以清楚的看到运行的sql语句)
优点：
由于是记录每一个事件的SQL语句，日志记录量相对较小，节约磁盘及网络I/O
只对一条记录修改或者插入，row格式产生的日志量小于段产生的日志量
缺点：
必须要记录上下文信息，保证语句在从服务器上执行结果和主服务器上相同
特定函数如UUID()，user()这样非确定性函数还是无法复制，可能造成mysql复制的主备服务器数据不一致
//查看使用的日志格式
show variables like 'binlog_format';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| binlog_format | MIXED |
+---------------+-------+
//改为基于段的日志格式
set session binlog_format=statement;
show variables like 'binlog_format';
+---------------+-----------+
| Variable_name | Value     |
+---------------+-----------+
| binlog_format | STATEMENT |
+---------------+-----------+

//show binary logs;  查看binlog日志
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       177 |
| mysql-bin.000002 |       177 |
| mysql-bin.000003 |      3409 |
| mysql-bin.000004 |  37266530 |
+------------------+-----------+

flush logs; //刷新日志  增加了mysql-bin.000005日志文件
show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       177 |
| mysql-bin.000002 |       177 |
| mysql-bin.000003 |      3409 |
| mysql-bin.000004 |  37266577 |
| mysql-bin.000005 |       154 |
+------------------+-----------+

新建一个数据库
create database crn;
create table t(id int,c1 varchar(10));
insert into t values(1,'aa'),(2,'bb');
//更新
update t set c1='dd' where id=1;
//新打开一个连接
cd /data/mysql
ls
auto.cnf  ib_buffer_pool  ib_logfile1  mysql             mysql-bin.000003  mysql-bin.index  mysql.pid           remote  test1
crn       ibdata1         ib_logfile2  mysql-bin.000001  mysql-bin.000004  mysqld_safe.pid  mysql-slow.log      sys
dbs       ib_logfile0     ibtmp1       mysql-bin.000002  mysql-bin.000005  mysql-error.log  performance_schema  test

//执行命令 mysqlbinlog mysql-bin.000005
SET @@session.collation_database=DEFAULT/*!*/;
create database crn
/*!*/;
# at 310
#181213 22:00:20 server id 1  end_log_pos 375 CRC32 0x4bc444b8 	Anonymous_GTID	last_committed=1	sequence_number=2
SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;
# at 375
#181213 22:00:20 server id 1  end_log_pos 484 CRC32 0x87c2fe18 	Query	thread_id=5854	exec_time=0	error_code=0
use `crn`/*!*/;
SET TIMESTAMP=1544709620/*!*/;
create table t(id int,c1 varchar(10))
/*!*/;
# at 484
#181213 22:01:08 server id 1  end_log_pos 549 CRC32 0x7b24cc98 	Anonymous_GTID	last_committed=2	sequence_number=3
SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;
# at 549
#181213 22:01:08 server id 1  end_log_pos 626 CRC32 0x255bb7a3 	Query	thread_id=5854	exec_time=0	error_code=0
SET TIMESTAMP=1544709668/*!*/;
BEGIN
/*!*/;
# at 626
#181213 22:01:08 server id 1  end_log_pos 735 CRC32 0xe313d085 	Query	thread_id=5854	exec_time=0	error_code=0
SET TIMESTAMP=1544709668/*!*/;
insert into t values(1,'aa'),(2,'bb')
/*!*/;
# at 735
#181213 22:01:08 server id 1  end_log_pos 766 CRC32 0x57df56ab 	Xid = 85794
COMMIT/*!*/;
# at 766
#181213 22:01:49 server id 1  end_log_pos 831 CRC32 0xa354bdd1 	Anonymous_GTID	last_committed=3	sequence_number=4
SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;
# at 831
#181213 22:01:49 server id 1  end_log_pos 908 CRC32 0x1020dd3a 	Query	thread_id=5854	exec_time=0	error_code=0
SET TIMESTAMP=1544709709/*!*/;
BEGIN
/*!*/;
# at 908
#181213 22:01:49 server id 1  end_log_pos 1011 CRC32 0xa5af6851 	Query	thread_id=5854	exec_time=0	error_code=0
SET TIMESTAMP=1544709709/*!*/;
update t set c1='dd' where id=1
/*!*/;
# at 1011
#181213 22:01:49 server id 1  end_log_pos 1042 CRC32 0xac8f487a 	Xid = 85795
COMMIT/*!*/;
SET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;
DELIMITER ;
# End of log file

//---------------------------------------基于行的日志格式binlog_format=ROW----------------------------
Row格式可以避免MYSQL复制中出现的主从不一致问题
同一SQL语句修改了10000条数据的情况下，基于段的日志格式只会记录这个SQL语句，
基于行的日志会有10000条记录分别记录每一行的数据修改
优点：
1、使mysql主从复制更加安全
2、对每一行数据的修改比基于段的复制高效
3、误操作而修改了数据库中的数据，同时又没有备份可以恢复时，我们就可以通过分析二进制日志，对日志中记录的数据修改操作做反向处理的方式来达到恢复数据的目的
缺点：
记录日志比较大
binlog_row_image(控制row格式记录日志的方式) =【FULL|MINIMAL|NOBLOB】
FULL:默认，记录所有的数据，即使只改了一行的一列，也会记录所有列
MINIMAL：只会记录修改列的数据，不会记录所有列
NOBLOB：和FULL差不多，只是text,blob列没修改的话，不会记录，其他未修改列也会记录


//修改为row格式
set session binlog_format=row;
show variables like 'binlog_format';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| binlog_format | ROW   |
+---------------+-------+
//刷新下log  flush logs;
show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |       177 |
| mysql-bin.000002 |       177 |
| mysql-bin.000003 |      3409 |
| mysql-bin.000004 |  37266577 |
| mysql-bin.000005 |      1089 |
| mysql-bin.000006 |       154 |
+------------------+-----------+

//确定binlog_row_image， show variables like 'binlog_row_image';
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| binlog_row_image | FULL  |
+------------------+-------+

select * from t;
+------+------+
| id   | c1   |
+------+------+
|    1 | dd   |
|    2 | bb   |
+------+------+

//增加一列 alter table t add c2 text;
select * from t;   //现在有3列数据了
+------+------+------+
| id   | c1   | c2   |
+------+------+------+
|    1 | dd   | NULL |
|    2 | bb   | NULL |
+------+------+------+
//插入操作 insert into t values(3,'ee','bbb');
//删除操作 delete from t where id =1;

//查看日志
mysqlbinlog -vv mysql-bin.000006 |more  会记录完整的信息
//设置为minimal  set session binlog_row_image=minimal;
update t set c2='this 2' where id=2;
//设置为noblob  set session binlog_row_image=noblob;

-------------------------------混合日志格式 binlog_format=MIXED-----------------------------------------------
特点：
1、根据SQL语句有系统决定在基于段和基于行的日志格式中进行选择（有用到UUID，user函数等的会使用基于行）
2、数据量的大小由所执行的SQL语句决定

建议：使用混合的日志格式
Binlog_format=mixed or Binlog_format=row(同一IDC机房的话，且建议Binlog_row_image=minimal)

----------------------------二进制日志格式对复制的影响-----------------------------
基于SQL语句的复制（SBR）：二进制日志格式使用的是statement格式
基于行的复制（RBR）：二进制日志格式使用的是基于行的日志格式
混合模式：根据实际内容在以上两者间切换

---------------------mysql二进制日志格式对复制的影响------------
1、基于sql语句的复制（SBR）
优点：
    生成的日志量少，节约网络传输I/O
    并不强制要求主从数据库的表定义完全相同
    相比于基于行的复制方式更为灵活（很容易定位sql语句的发生）
















































































