调用model    model()

查询多条数据
Db::name('advertise')->field("name,img,flag,ishtml,isclick,url")->select()

跳到制定模板
$this->fetch('index/showUpload')

获取表单提交
input()

配置获取 设置 加载配置文件
Config::get() set()  Config::load('配置文件名')

不使用独立配置文件的话，数据库配置信息应该是在config.php中配置  也可以在database.php中，后者覆盖前者

.env文件
Env::get('database.username');

是否开启路由
url_route_on
混合路由
'url_route_on'  =>  true,
'url_route_must'=>  false,
强制路由
'url_route_on'  		=>  true,
'url_route_must'		=>  true,

注册路由
Route::rule('new/:id','index/News/read');

定义new路由命名标识
Route::rule(['new','new/:id'],'index/News/read');

指定请求方式
Route::rule('new/:id','News/update','POST');
Route::get('new/:id','News/read'); // 定义GET请求路由规则
Route::post('new/:id','News/update'); // 定义POST请求路由规则
Route::put('new/:id','News/update'); // 定义PUT请求路由规则
Route::delete('new/:id','News/delete'); // 定义DELETE请求路由规则
Route::any('new/:id','News/read'); // 所有请求都支持的路由规则
Route::rule('new/:id','News/read','GET|POST');

批量注册路由规则
Route::rule(['new/:id'=>'News/read','blog/:name'=>'Blog/detail']);
Route::get(['new/:id'=>'News/read','blog/:name'=>'Blog/detail']);
Route::post(['new/:id'=>'News/update','blog/:name'=>'Blog/detail']);

'/' => 'index', // 首页访问路由
'my'        =>  'Member/myinfo', // 静态地址路由
'blog/:id'  =>  'Blog/read', // 静态地址和动态地址结合
'new/:year/:month/:day'=>'News/read', // 静态地址和动态地址结合
':user/:blog_id'=>'Blog/read',// 全动态地址

//完全匹配
'new/:cate$'=> 'News/category',
// 开启路由定义的全局完全匹配
'route_complete_match'  =>  true,
Route::rule('new/:id','News/read','GET|POST',['complete_match' => false]);

批量注册
Route::rule([
'路由规则1'=>'路由地址和参数',
'路由规则2'=>['路由地址和参数','匹配参数（数组）','变量规则（数组）']
...
],'','请求类型','匹配参数（数组）','变量规则');

Route::rule([
'new/:id'  =>  'News/read',
'blog/:id' =>  ['Blog/update',['ext'=>'shtml'],['id'=>'\d{4}']],
...
],'','GET',['ext'=>'html'],['id'=>'\d+']);

Db::query('select * from think_user where id=?',[8]);
Db::execute('insert into think_user (id, name) values (?, ?)',[8,'thinkphp']);
Db::table('think_user')->where('id',1)->find();
Db::table('think_user')->where('status',1)->select();
如果设置了数据表前缀参数的话，可以使用

Db::name('user')->where('id',1)->find();
Db::name('user')->where('status',1)->select();

主从查询
如果你使用了分布式数据库，那么默认情况下查询操作都是在从数据库中进行，如果你在一些特殊的情况下需要从主库读取数据，可以使用：

$data = ['foo' => 'bar', 'bar' => 'foo'];
Db::table('think_user')->insert($data);
Db::name('user')->master()->where('id',1)->find();\
// 从主库读取数据
'read_master'	=>	true,

如果你只需要对某个表进行操作，可以使用readMaster方法。

$data = ['foo' => 'bar', 'bar' => 'foo'];
Db::table('think_user')
->readMaster()
->insert($data);

系统提供了一个db助手函数，可以更方便的查询：

db('user')->where('id',1)->find();
db('user')->where('status',1)->select();

注意：使用db助手函数默认每次都会重新连接数据库，而使用Db::name或者Db::table方法的话都是单例的。db函数如果需要采用相同的链接，可以传入第三个参数，例如：

db('user',[],false)->where('id',1)->find();
db('user',[],false)->where('status',1)->select()

// 返回某个字段的值
Db::table('think_user')->where('id',1)->value('name');

// 返回数组
Db::table('think_user')->where('status',1)->column('name');
// 指定索引
Db::table('think_user')->where('status',1)->column('name','id');
Db::table('think_user')->where('status',1)->column('id,name'); // 同tp3的getField

如果你需要处理成千上百条数据库记录，可以考虑使用chunk方法，该方法一次获取结果集的一小块，然后填充每一小块数据到要处理的闭包，该方法在编写处理大量数据库记录的时候非常有用。

比如，我们可以全部用户表数据进行分批处理，每次处理 100 个用户记录

Db::table('think_user')->chunk(100, function($users) {
foreach ($users as $user) {
//
}
});
// 或者交给回调方法myUserIterator处理
Db::table('think_user')->chunk(100, 'myUserIterator');

也支持在chunk方法之前调用其它的查询方法，例如：

Db::table('think_user')->where('score','>',80)->chunk(100, function($users) {
foreach ($users as $user) {
//
}
});

// 查询JSON类型字段 （info字段为json类型）
Db::table('think_user')->where('info$.email','thinkphp@qq.com')->find();

$data = ['foo' => 'bar', 'bar' => 'foo'];
Db::table('think_user')->insert($data);

添加数据后如果需要返回新增数据的自增主键，可以使用getLastInsID方法：

Db::name('user')->insert($data);
$userId = Db::name('user')->getLastInsID();

或者直接使用insertGetId方法新增数据并返回主键值：

Db::name('user')->insertGetId($data);

//添加多条数据
$data = [
['foo' => 'bar', 'bar' => 'foo'],
['foo' => 'bar1', 'bar' => 'foo1'],
['foo' => 'bar2', 'bar' => 'foo2']
];
Db::name('user')->insertAll($data);

Db::table('data')
->data(['name'=>'tp','score'=>1000])
->insert();

更新数据表中的数据
Db::table('think_user')->where('id', 1)->update(['name' => 'thinkphp']);
如果数据中包含主键，可以直接使用：

Db::table('think_user')->update(['name' => 'thinkphp','id'=>1]);

Db::table('think_user')
->where('id', 1)
->update([
'login_time'  => ['exp','now()'],
'login_times' => ['exp','login_times+1'],
]);

Db::table('think_user')->where('id',1)->setField('name', 'thinkphp');

// score 字段加 1
Db::table('think_user')->where('id', 1)->setInc('score');
// score 字段加 5
Db::table('think_user')->where('id', 1)->setInc('score', 5);
// score 字段减 1
Db::table('think_user')->where('id', 1)->setDec('score');
// score 字段减 5
Db::table('think_user')->where('id', 1)->setDec('score', 5);

setInc/setDec支持延时更新，如果需要延时更新则传入第三个参数
下例中延时10秒，给score字段增加1

Db::table('think_user')->where('id', 1)->setInc('score', 1, 10);

// 根据主键删除
Db::table('think_user')->delete(1);
Db::table('think_user')->delete([1,2,3]);

// 条件删除
Db::table('think_user')->where('id',1)->delete();
Db::table('think_user')->where('id','<',10)->delete();

可以使用where方法进行AND条件查询：

Db::table('think_user')
->where('name','like','%thinkphp')
->where('status',1)
->find();

多字段相同条件的AND查询可以简化为如下方式：（这种很少吧）

Db::table('think_user')
->where('name&title','like','%thinkphp')
->find();

使用whereOr方法进行OR查询：

Db::table('think_user')
->where('name','like','%thinkphp')
->whereOr('title','like','%thinkphp')
->find();

使用getTableInfo可以获取表信息，信息类型 包括 fields,type,bind,pk，以数组的形式展示，可以指定某个信息进行获取

// 获取`think_user`表所有信息
Db::getTableInfo('think_user');
// 获取`think_user`表所有字段
Db::getTableInfo('think_user', 'fields');
// 获取`think_user`表所有字段的类型
Db::getTableInfo('think_user', 'type');
// 获取`think_user`表的主键
Db::getTableInfo('think_user', 'pk');

where('id','eq',100);
where('id','=',100);

where('id','between','1,8');
where('id','not in','1,5,8');  where('id','not in',[1,5,8]);

where('name', null);
where('title','null');
where('name','not null');

EXP：表达式
支持更复杂的查询情况 例如：

where('id','in','1,3,8');
可以改成：

where('id','exp',' IN (1,3,8) ');
exp查询的条件不会被当成字符串，所以后面的查询条件可以使用任何SQL支持的语法，包括使用函数和字段名称。

Db::table('think_user')
->where('id','>',1)
->where('name','thinkphp')
->select();

//这种适合输入多条件查询。。。。。
$map['name'] = 'thinkphp';
$map['status'] = 1;
// 把查询条件传入查询方法
Db::table('think_user')->where($map)->select();

表达式查询
可以在数组条件中使用查询表达式，例如：

---------------------------------------------
$map['id']  = ['>',1];
$map['mail']  = ['like','%thinkphp@qq.com%'];
Db::table('think_user')->where($map)->select();

Db::table('think_user')->where('type=1 AND status=1')->select();

使用字符串条件的时候，建议配合预处理机制，确保更加安全，例如：

Db::table('think_user')->where("id=:id and username=:name")->bind(['id'=>[1,\PDO::PARAM_INT],'name'=>'thinkphp'])->select();
Db::table('think_user')->where('status>1')->select();
也可以在table方法中指定数据库，例如：

Db::table('db_name.think_user')->where('status>1')->select();

？？？？
Db::field('user.name,role.title')
->table(['think_user'=>'user','think_role'=>'role'])
->limit(10)->select();

Db::table('think_user')->alias('a')->join('__DEPT__ b ','b.user_id= a.id')->select();
最终生成的SQL语句类似于：

SELECT * FROM think_user a INNER JOIN think_dept b ON b.user_id= a.id

Db::table('think_user')->alias(['think_user'=>'user','think_dept'=>'dept'])->join('think_dept','dept.user_id= user.id')->select();
Db::table('think_user')->field('id,title,content')->select();
可以给某个字段设置别名，例如：
Db::table('think_user')->field('id,nickname as name')->select();

可以在field方法中直接使用函数，例如：

Db::table('think_user')->field('id,SUM(score)')->select();

//数组参数
Db::table('think_user')->field(['id','title','content'])->select();

对于一些更复杂的字段要求，数组的优势则更加明显，例如：       ---------------------------------------------------

Db::table('think_user')->field(['id','concat(name,"-",id)'=>'truename','LEFT(title,7)'=>'sub_title'])->select();
执行的SQL相当于：

SELECT id,concat(name,'-',id) as truename,LEFT(title,7) as sub_title FROM table

所有字段-------------不好
Db::table('think_user')->select();
Db::table('think_user')->field('*')->select();

Db::table('think_user')->field(true)->select();
field(true)的用法会显式的获取数据表的所有字段列表，哪怕你的数据表有100个字段。

如果我希望获取排除数据表中的content字段（文本字段的值非常耗内存）之外的所有字段值，我们就可以使用field方法的排除功能，例如下面的方式就可以实现所说的功能：

Db::table('think_user')->field('content',true)->select();

Db::table('think_user')->field('user_id,content',true)->select();
//或者用
Db::table('think_user')->field(['user_id','content'],true)->select();

除了查询操作之外，field方法还有一个非常重要的安全功能--字段合法性检测。field方法结合数据库的写入方法使用就可以完成表单提交的字段合法性检测，如果我们在表单提交的处理方法中使用了：

Db::table('think_user')->field('title,email,content')->insert($data);

系统还提供了fieldRaw方法，用于更安全的指定字段，尤其是使用了SQL函数的情况。
Db::table('think_user')->fieldRaw('title,email,content,max(score) as max_score')->insert($data);

Db::table('think_user')->where('status=1')->order('id desc')->limit(5)->select();
Db::table('think_user')->where('status=1')->order('id desc,status')->limit(5)->select();
如果你的字段和mysql关键字有冲突，那么建议采用数组方式调用，例如：

Db::table('think_user')->where('status=1')->order(['order','id'=>'desc'])->limit(5)->select();
Db::table('think_user')->where('status=1')->orderRaw('rand()')->limit(5)->select();

// 查询第一页数据
Db::table('think_article')->page('1,10')->select();
// 查询第二页数据
Db::table('think_article')->page('2,10')->select();
显而易见的是，使用page方法你不需要计算每个分页数据的起始位置，page方法内部会自动计算。

page方法还可以和limit方法配合使用，例如：

Db::table('think_article')->limit(25)->page(3)->select();
当page方法只有一个值传入的时候，表示第几页，而limit方法则用于设置每页显示的数量，也就是说上面的写法等同于：

Db::table('think_article')->page('3,25')->select()

Db::table('think_user')
->field('user_id,username,max(score)')
->group('user_id')
->select();
生成的SQL语句是：

SELECT user_id,username,max(score) FROM think_score GROUP BY user_id
也支持对多个字段进行分组，例如：

Db::table('think_user')
->field('user_id,test_time,username,max(score)')
->group('user_id,test_time')
->select();
生成的SQL语句是：

SELECT user_id,test_time,username,max(score) FROM think_score GROUP BY user_id,test_time

Db::table('think_user')
->field('username,max(score)')
->group('user_id')
->having('count(test_time)>3')
->select();
生成的SQL语句是：

SELECT username,max(score) FROM think_score GROUP BY user_id HAVING count(test_time)>3

默认采用INNER JOIN 方式，如果需要用其他的JOIN方式，可以改成

Db::table('think_user')->alias('a')->join('word w','a.id = w.artist_id','RIGHT')->select();

表名也可以是一个子查询

$subsql = Db::table('think_work')->where(['status'=>1])->field('artist_id,count(id) count')->group('artist_id')->buildSql();
Db::table('think_user')->alias('a')->join([$subsql=> 'w'], 'a.artist_id = w.artist_id')->select();
因buildSql返回的语句带有()，所以这里不需要在两端再加上()。

Db::field('name')
->table('think_user_0')
->union('SELECT name FROM think_user_1')
->union('SELECT name FROM think_user_2')
->select();

以下代码会返回user_login字段不同的数据

Db::table('think_user')->distinct(true)->field('user_login')->select();
生成的SQL语句是： SELECT DISTINCT user_login FROM think_user

Lock方法是用于数据库的锁机制，如果在查询或者执行操作的时候使用：

Db::name('user')->where('id',1)->lock(true)->find();
就会自动在生成的SQL语句最后加上 FOR UPDATE或者FOR UPDATE NOWAIT（Oracle数据库）。

lock方法支持传入字符串用于一些特殊的锁定要求，例如：

Db::name('user')->where('id',1)->lock('lock in share mode')->find();

cache可以用于select、find、value和column方法，以及其衍生方法，使用cache方法后，在缓存有效期之内不会再次进行数据库查询操作，而是直接获取缓存中的数据

Db::table('think_user')->where('id=5')->cache(true)->find();
默认情况下， 缓存有效期是由默认的缓存配置参数决定的，但cache方法可以单独指定，例如：

//指定缓存时间
Db::table('think_user')->cache(true,60)->find();
// 或者使用下面的方式 是等效的
Db::table('think_user')->cache(60)->find();

在外部就可以通过\think\Cache类直接获取查询缓存的数据，例如：

$result = Db::table('think_user')->cache('key',60)->find();
$data = \think\Cache::get('key');

fetchSql用于直接返回SQL而不是执行查询，适用于任何的CURD操作方法。 例如：

$result = Db::table('think_user')->fetchSql(true)->find(1);
输出result结果为： SELECT * FROM think_user where id = 1

//强制索引
force 方法用于数据集的强制索引操作，例如：

Db::table('think_user')->force('user')->select();
对查询强制使用user索引，user必须是数据表实际创建的索引名称

bind方法用法如下：

// 用于查询
Db::table('think_user')
->where('id',':id')
->where('name',':name')
->bind(['id'=>[10,\PDO::PARAM_INT],'name'=>'thinkphp'])
->select();

// 用于写入
Db::table('think_user')
->bind(['id'=>[10,\PDO::PARAM_INT],'email'=>'thinkphp@qq.com','name'=>'thinkphp'])
->where('id',':id')
->update(['name'=>':name','email'=>':email']);

partition 方法用于是数据库水平分表

partition($data, $field, $rule);

partition 方法用于是数据库水平分表
// 用于写入
$data = [
'user_id'   => 110,
'user_name' => 'think'
];

$rule = [
'type' => 'mod', // 分表方式
'num'  => 10     // 分表数量
];

Db::name('log')
->partition(['user_id' => 110], "user_id", $rule)
->insert($data);

// 用于查询
Db::name('log')
->partition(['user_id' => 110], "user_id", $rule)
->where(['user_id' => 110])
->select()

strict方法用于设置是否严格检查字段名，用法如下：

// 关闭字段严格检查
Db::name('user')
->strict(false)
->insert($data);
注意，系统默认值是由数据库配置参数fields_strict决定，因此修改数据库配置参数可以进行全局的严格检查配置，如下：

// 关闭严格检查字段是否存在
'fields_strict'  => false,
如果开启字段严格检查的话，在更新和写入数据库的时候，一旦存在非数据表字段的值，则会抛出异常。

或者可以使用更方便的查空报错 --------------这个自己可以判断

// 查询多条
Db::name('blog')
->where(['status' => 1])
->selectOrFail();

// 查询单条
Db::name('blog')
->where(['status' => 1])
->findOrFail();

count	统计数量，参数是要统计的字段名（可选）
max	获取最大值，参数是要统计的字段名（必须）
min	获取最小值，参数是要统计的字段名（必须）
avg	获取平均值，参数是要统计的字段名（必须）
sum	获取总分，参数是要统计的字段名（必须）

//时间比较
// 大于某个时间
where('create_time','> time','2016-1-1');
// 小于某个时间
where('create_time','<= time','2016-1-1');
// 时间区间查询
where('create_time','between time',['2015-1-1','2016-1-1']);

whereTime方法提供了日期和时间字段的快捷查询，示例如下：

// 大于某个时间
Db::table('think_user')->whereTime('birthday', '>=', '1970-10-1')->select();
// 小于某个时间
Db::table('think_user')->whereTime('birthday', '<', '2000-10-1')->select();
// 时间区间查询
Db::table('think_user')->whereTime('birthday', 'between', ['1970-10-1', '2000-10-1'])->select();
// 不在某个时间区间
Db::table('think_user')->whereTime('birthday', 'not between', ['1970-10-1', '2000-10-1'])->select();

// 获取今天的博客
Db::table('think_blog') ->whereTime('create_time', 'today')->select();
// 获取昨天的博客
Db::table('think_blog')->whereTime('create_time', 'yesterday')->select();
// 获取本周的博客
Db::table('think_blog')->whereTime('create_time', 'week')->select();
// 获取上周的博客
Db::table('think_blog')->whereTime('create_time', 'last week')->select();
// 获取本月的博客
Db::table('think_blog')->whereTime('create_time', 'month')->select();
// 获取上月的博客
Db::table('think_blog')->whereTime('create_time', 'last month')->select();
// 获取今年的博客
Db::table('think_blog')->whereTime('create_time', 'year')->select();
// 获取去年的博客
Db::table('think_blog')->whereTime('create_time', 'last year')->select();

如果查询当天、本周、本月和今年的时间，还可以简化为：

// 获取今天的博客
Db::table('think_blog')->whereTime('create_time', 'd')->select();
// 获取本周的博客
Db::table('think_blog')->whereTime('create_time', 'w')->select();
// 获取本月的博客
Db::table('think_blog')->whereTime('create_time', 'm')->select();
// 获取今年的博客
Db::table('think_blog')->whereTime('create_time', 'y') ->select();

V5.0.5+版本开始，还可以使用下面的方式进行时间查询

// 查询两个小时内的博客
Db::table('think_blog')->whereTime('create_time','-2 hours')->select();

区间查询是一种同一字段多个查询条件的简化写法，例如：

Db::table('think_user')
->where('name',['like','thinkphp%'],['like','%thinkphp'])
->where('id',['>',0],['<>',10],'or')
->find();

Db::table('think_user')
->where([
'name'  =>  ['like','thinkphp%'],
'title' =>  ['like','%thinkphp'],
'id'    =>  ['>',0],
'status'=>  1
])
->select();

Db::table('think_user')
->where('id > :id AND name LIKE :name ',['id'=>0, 'name'=>'thinkphp%'])
->select();

whereNull	查询字段是否为Null
whereNotNull	查询字段是否不为Null
whereIn	字段IN查询
whereNotIn	字段NOT IN查询
whereBetween	字段BETWEEN查询
whereNotBetween	字段NOT BETWEEN查询
whereLike	字段LIKE查询
whereNotLike	字段NOT LIKE查询
whereExists	EXISTS条件查询
whereNotExists	NOT EXISTS条件查询
whereExp	表达式查询

$subQuery = Db::table('think_user')
->field('id,name')
->where('id','>',10)
->buildSql();
生成的subQuery结果为：

( SELECT `id`,`name` FROM `think_user` WHERE `id` > 10 )
调用buildSql方法后不会进行实际的查询操作，而只是生成该次查询的SQL语句（为了避免混淆，会在SQL两边加上括号），然后我们直接在后续的查询中直接调用。

Db::table($subQuery.' a')
->where('a.name','like','thinkphp')
->order('id','desc')
->select();
生成的SQL语句为：

SELECT * FROM ( SELECT `id`,`name` FROM `think_user` WHERE `id` > 10 ) a WHERE a.name LIKE 'thinkphp' ORDER BY `id` desc

Db::table('think_user')
->where(function($query){
$query->table('think_profile')->where('status',1);
},'exists')
->find();
生成的SQL语句为

SELECT * FROM `think_user` WHERE EXISTS ( SELECT * FROM `think_profile` WHERE `status` = 1 )

query方法用于执行SQL查询操作，如果数据非法或者查询错误则返回false，否则返回查询结果数据集（同select方法）。

使用示例：

Db::query("select * from think_user where status=1");
execute用于更新和写入数据的sql操作，如果数据非法或者查询错误则返回false ，否则返回影响的记录数。

使用示例：

Db::execute("update think_user set name='thinkphp' where status=1");
Db::query("select * from think_user where id=? AND status=?",[8,1]);
// 命名绑定
Db::execute("update think_user set name=:name where status=:status",['name'=>'thinkphp','status'=>1]);

自动控制事务处理

Db::transaction(function(){
Db::table('think_user')->find(1);
Db::table('think_user')->delete(1);
});

// 启动事务
Db::startTrans();
try{
Db::table('think_user')->find(1);
Db::table('think_user')->delete(1);
// 提交事务
Db::commit();
} catch (\Exception $e) {
// 回滚事务
Db::rollback();
}

如果开启数据库的调试模式的话，你可以对数据库执行的任何SQL操作进行监听，使用如下方法：

//调试
Db::listen(function($sql, $time, $explain){
// 记录SQL
echo $sql. ' ['.$time.'s]';
// 查看性能分析结果
dump($explain);
});

return [
// 数据库类型
'type'        => 'mysql',
// 数据库连接DSN配置
'dsn'         => '',
// 服务器地址
'hostname'    => '127.0.0.1',
// 数据库名
'database'    => 'thinkphp',
// 数据库用户名
'username'    => 'root',
// 数据库密码
'password'    => '',
// 数据库连接端口
'hostport'    => '',
// 数据库连接参数
'params'      => [],
// 数据库编码默认采用utf8
'charset'     => 'utf8',
// 数据库表前缀
'prefix'      => 'think_',
// 数据集返回类型
'resultset_type' => 'collection',
]

$users = Db::name('user')->select();
if($users->isEmpty()){
echo '数据集为空';
}
Collection类包含了下列主要方法：

方法	描述
isEmpty	是否为空
toArray	转换为数组
all	所有数据
merge	合并其它数据
diff	比较数组，返回差集
flip	交换数据中的键和值
intersect	比较数组，返回交集
keys	返回数据中的所有键名
pop	删除数据中的最后一个元素
shift	删除数据中的第一个元素
unshift	在数据开头插入一个元素
reduce	通过使用用户自定义函数，以字符串返回数组
reverse	数据倒序重排
chunk	数据分隔为多个数据块
each	给数据的每个元素执行回调
filter	用回调函数过滤数据中的元素
column	返回数据中的指定列
sort	对数据排序
shuffle	将数据打乱
slice	截取数据中的一部分

配置database.deploy 为1 可以采用分布式数据库支持

namespace app\index\model;

use think\Model;

class User extends Model
{
protected $pk = 'uid'; //指定主键
}

class User extends \think\Model
{
// 设置当前模型对应的完整数据表名称
protected $table = 'think_user';

// 设置当前模型的数据库连接
protected $connection = [
// 数据库类型
'type'        => 'mysql',
// 服务器地址
'hostname'    => '127.0.0.1',
// 数据库名
'database'    => 'thinkphp',
// 数据库用户名
'username'    => 'root',
// 数据库密码
'password'    => '',
// 数据库编码默认采用utf8
'charset'     => 'utf8',
// 数据库表前缀
'prefix'      => 'think_',
// 数据库调试模式
'debug'       => false,
];
}

// 静态调用
$user = User::get(1);
$user->name = 'thinkphp';
$user->save();

// 实例化模型
$user = new User;
$user->name= 'thinkphp';
$user->save();

// 使用 Loader 类实例化（单例）
$user = Loader::model('User');

// 或者使用助手函数`model`   这个还比较好-----------------
$user = model('User');
$user->name= 'thinkphp';
$user->save();

$user = new User;
$user->data([
'name'  =>  'thinkphp',
'email' =>  'thinkphp@qq.com'
]);
$user->save();

或者直接在实例化的时候传入数据

$user = new User([
'name'  =>  'thinkphp',
'email' =>  'thinkphp@qq.com'
]);
$user->save();

$user = new User($_POST);
// post数组中只有name和email字段会写入
$user->allowField(['name','email'])->save();

$user           = new User;
$user->name     = 'thinkphp';
$user->email    = 'thinkphp@qq.com';
$user->save();
// 获取自增ID
echo $user->id;

添加多条数据
支持批量新增，可以使用：

$user = new User;
$list = [
['name'=>'thinkphp','email'=>'thinkphp@qq.com'],
['name'=>'onethink','email'=>'onethink@qq.com']
];
$user->saveAll($list);

saveAll方法新增数据默认会自动识别数据是需要新增还是更新操作，当数据中存在主键的时候会认为是更新操作，如果你需要带主键数据批量新增，可以使用下面的方式：

$user = new User;
$list = [
['id'=>1, 'name'=>'thinkphp', 'email'=>'thinkphp@qq.com'],
['id'=>2, 'name'=>'onethink', 'email'=>'onethink@qq.com'],
];
$user->saveAll($list, false);

$user = model('User');
// 模型对象赋值
$user->data([
'name'  =>  'thinkphp',
'email' =>  'thinkphp@qq.com'
]);
$user->save();
或者进行批量新增：

$user = model('User');
// 批量新增
$list = [
['name'=>'thinkphp','email'=>'thinkphp@qq.com'],
['name'=>'onethink','email'=>'onethink@qq.com']
];
$user->saveAll($list);

$user = new User;
// save方法第二个参数为更新条件
$user->save([
'name'  => 'thinkphp',
'email' => 'thinkphp@qq.com'
],['id' => 1]);

$user = new User();
// post数组中只有name和email字段会写入
$user->allowField(['name','email'])->save($_POST, ['id' => 1]);

$user = new User;
$list = [
['id'=>1, 'name'=>'thinkphp', 'email'=>'thinkphp@qq.com'],
['id'=>2, 'name'=>'onethink', 'email'=>'onethink@qq.com']
];
$user->saveAll($list);

$user = new User;
$list = [
['id'=>1, 'name'=>'thinkphp', 'email'=>'thinkphp@qq.com'],
['id'=>2, 'name'=>'onethink', 'email'=>'onethink@qq.com']
];
$user->isUpdate()->saveAll($list);

$user = new User;
$user->update(['id' => 1, 'name' => 'thinkphp']);

User::update(['id' => 1, 'name' => 'thinkphp']);

$user = new User;
// 显式指定更新数据操作
$user->isUpdate(true)
->save(['id' => 1, 'name' => 'thinkphp']);

$user = User::get(1);
$user->name = 'thinkphp';
// 显式指定当前操作为新增操作
$user->isUpdate(false)->save();

User::destroy(1);
// 支持批量删除多个数据
User::destroy('1,2,3');
// 或者
User::destroy([1,2,3]);

// 删除状态为0的数据
User::destroy(['status' => 0]);
还支持使用闭包删除，例如：

User::destroy(function($query){
$query->where('id','>',10);
});
或者通过数据库类的查询条件删除

User::where('id','>',10)->delete();

获取单个数据的方法包括：

取出主键为1的数据
$user = User::get(1);
echo $user->name;

// 使用数组查询
$user = User::get(['name' => 'thinkphp']);

// 使用闭包查询
$user = User::get(function($query){
$query->where('name', 'thinkphp');
});
echo $user->name;

取出多个数据：

// 根据主键获取多个数据
$list = User::all('1,2,3');
// 或者使用数组
$list = User::all([1,2,3]);
foreach($list as $key=>$user){
echo $user->name;
}
// 使用数组查询
$list = User::all(['status'=>1]);
// 使用闭包查询
$list = User::all(function($query){
$query->where('status', 1)->limit(3)->order('id', 'asc');
});
foreach($list as $key=>$user){
echo $user->name;
}

支持在模型中单独设置查询数据集的返回对象的名称（默认是数组），例如：

namespace app\index\model;

use think\Model;

class User extends Model
{
	// 设置返回数据集的对象名
	protected $resultSetType = 'collection';
}

// 获取某个用户的积分
User::where('id',10)->value('score');
// 获取某个列的所有值
User::where('status',1)->column('name');
// 以id为索引
User::where('status',1)->column('name','id');
User::where('status',1)->column('id,name'); // 同tp3的getField

// 根据name字段查询用户
$user = User::getByName('thinkphp');

// 根据email字段查询用户
$user = User::getByEmail('thinkphp@qq.com');

User::where('id','>',10)->select();
User::where('name','thinkphp')->find();

get方法和all方法的第三个参数表示是否使用查询缓存，或者设置缓存标识。

$user = User::get(1,'',true);
$list  = User::all('1,2,3','',true);

静态调用：

User::count();
User::where('status','>',0)->count();
User::where('status',1)->avg('score');
User::max('score');
动态调用：

$user = new User;
$user->count();
$user->where('status','>',0)->count();
$user->where('status',1)->avg('score');
$user->max('score');

//获取器
class User extends Model
{
public function getStatusAttr($value)
{
$status = [-1=>'删除',0=>'禁用',1=>'正常',2=>'待审核'];
return $status[$value];
}
}
$user = User::get(1);
echo $user->status; // 例如输出“正常”

修改器
修改器的作用是可以在数据赋值的时候自动进行转换处理，例如：

class User extends Model
{
public function setNameAttr($value)
{
return strtolower($value);
}
$user = new User();
$user->name = 'THINKPHP';
$user->save();
echo $user->name; // thinkphp

//时间戳-------------------------------------------------
第一种方式，是在数据库配置文件中添加全局设置：

// 开启自动写入时间戳字段
'auto_timestamp' => true,
第二种是直接在单独的模型类里面设置：

protected $autoWriteTimestamp = true;
如果这两个地方设置为true，默认识别为整型int类型，如果你的时间字段不是int类型的话，例如使用datetime类型的话，可以这样设置：

// 开启自动写入时间戳字段
'auto_timestamp' => 'datetime',
或者

protected $autoWriteTimestamp = 'datetime';
字段名默认创建时间字段为create_time，更新时间字段为update_time，支持的字段类型包括timestamp/datetime/int。

如果你的数据表字段不是默认值的话，可以按照下面的方式定义：

class User extends Model
{
// 定义时间戳字段名
protected $createTime = 'create_at';
protected $updateTime = 'update_at';
}

如果你只需要使用create_time字段而不需要自动写入update_time，则可以单独设置关闭某个字段，例如：

class User extends Model
{
// 关闭自动写入update_time字段
protected $updateTime = false;
}
如果不需要任何自动写入的时间戳字段的话，可以关闭时间戳自动写入功能，设置如下：

class User extends Model
{
// 关闭自动写入时间戳
protected $autoWriteTimestamp = false;
}
如果是关闭全局的自动时间写入，则可以使用：

// 关闭全局自动写入时间字段
'auto_timestamp' => false,

//----------------------readonly
class User extends Model
{
protected $readonly = ['name','email'];
}
例如，上面定义了当前模型的name和email字段为只读字段，不允许被更改。也就是说当执行更新方法之前会自动过滤掉只读字段的值，避免更新到数据库。

对数据频繁使用删除操作会导致性能问题，软删除的作用就是把数据加上删除标记，而不是真正的删除，同时也便于需要的时候进行数据的恢复。

要使用软删除功能，需要引入SoftDelete trait，例如User模型按照下面的定义就可以使用软删除功能：

namespace app\index\model;

use think\Model;
use traits\model\SoftDelete;

class User extends Model
{
use SoftDelete;
protected $deleteTime = 'delete_time';
}

// 软删除
User::destroy(1);
// 真实删除
User::destroy(1,true);
$user = User::get(1);
// 软删除
$user->delete();
// 真实删除
$user->delete(true);

默认情况下查询的数据不包含软删除数据，如果需要包含软删除的数据，可以使用下面的方式查询：

User::withTrashed()->find();
User::withTrashed()->select();
如果仅仅需要查询软删除的数据，可以使用：

User::onlyTrashed()->find();
User::onlyTrashed()->select();

支持给字段设置类型自动转换，会在写入和读取的时候自动进行类型转换处理，例如：

class User extends Model
{
protected $type = [
'status'    =>  'integer',
'score'     =>  'float',
'birthday'  =>  'datetime',
'info'      =>  'array',
];
}

系统支持auto、insert和update三个属性，可以分别在写入、新增和更新的时候进行字段的自动完成机制，auto属性自动完成包含新增和更新操作
class User extends Model
{
protected $auto = [];
protected $insert = ['ip','status' => 1];
protected $update = ['login_ip'];

protected function setIpAttr()
{
return request()->ip();
}
}
在新增数据的时候，会对ip和 status 字段自动完成或者处理。

$user = new User;
$user->name = 'ThinkPHP';
$user->save();
echo $user->name; // thinkphp
echo $user->status; // 1
在保存操作的时候，会自动完成ip字段的赋值。

$user = User::find(1);
$user->name = 'THINKPHP';
$user->save();
echo $user->name; // thinkphp
echo $user->ip; // 127.0.0.1

//查询范围
class User extends Model
{

protected function scopeThinkphp($query)
{
$query->where('name','thinkphp')->field('id,name');
}

protected function scopeAge($query)
{
$query->where('age','>',20)->limit(10);
}

}
就可以进行下面的条件查询：

// 查找name为thinkphp的用户
User::scope('thinkphp')->find();
// 查找年龄大于20的10个用户
User::scope('age')->select();
// 查找name为thinkphp的用户并且年龄大于20的10个用户
User::scope('thinkphp,age')->select();

class User extends Model
{

protected function scopeAgeAbove($query, $lowest_age)
{
$query->where('age','>',$lowest_age)->limit(10);
}
}

User::scope('ageAbove', 20)->select();

获取请求控制器
request()->controller()
获取请求方法
request()->action(true)
//直接调用控制器下的某个方法   这里是service控制器下的Log方法
controller('service/Log')

//pattern 做验证
Route::get('detail/:id','index/OutsideOrder/getDetail')->pattern(['id' => '\d+']);

//更新  put方法
Request::put()