nginx 停止： *****
netstat -anp|grep 80
kill -QUIT 主进程号

nginx是开源高性能、可靠的HTTP中间件、代理服务
常见的HTTP服务
HTTPD IIS GWS NGINX

优势、
IO多路复用epoll 文件描述符准备好后主动上报
多个描述符的I/O操作都能在一个线程内并发交替地顺序完成，这就叫I/O多路复用，这里的复用指的是复用同一个线程。

什么是epoll
IO多路复用的实现方式select、poll、epoll
select 内核不断的遍历准备好的文件描述符，以准备去唤醒进程来处理，线性扫描效率低下，能够监视文件描述符的数量存在最大限制（1024）
epoll  每当FD就绪，采用系统的回调函数之间将fd放入,效率更高，最大连接无限制。


轻量级：考虑性能优势
功能模块少，代码模块化

CPU亲和：
是一种把CPU核心和nginx工作进程绑定方式，把每个worker进程固定在一个cpu上执行，减少切换cpu的cache miss，获得更好的性能

sendfile:
httpserver 传输文件是要经过内核和用户空间，最终到达socket，通过socket传达给用户，静态文件不许要通过用户空间的
逻辑性处理，只通过linux（2.2）的零拷贝，内核传递到socket

nginx的安装：
卸载
编译时的路径如果指定了--prefix /usr/local/xxx 直接rm -rf /usr/local/xxx即可。
下载地址：http://nginx.org/en/download.html

----------
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/7/$basearch/
gpgcheck=0
enabled=1

cd /etc/yum
vim /etc/yum.repos.d/nginx.repo  填入虚线下的内容

yum install -y nginx

nginx -V 显示编译参数
rpm ql nginx 可以看到nginx的安装目录
/etc/logrotate.d/nginx   配置文件   nginx日志轮转，用于logrotate服务的日志切割
/etc/nginx下的nginx.conf  conf.d/default.conf    目录、配置文件，nginx主配置文件
/etc/nginx下 fastcgi_params uwsgi_params scgi_params  配置文件  cgi配置相关，fastcgi配置
/etc/nginx下 mime.types  配置文件  设置http协议的Content-Type与扩展名对应关系
/usr/lib/systemd/system下  nginx-debug.service，nginx.service  /etc/sysconfig下的 nginx、nginx-debug  配置文件
用于配置出系统守护进程管理器管理方式

/usr/lib64/nginx/modules  /etc/nginx/modules   目录  nginx模块目录
/usr/sbin 下 nginx nginx-debug  命令  Nginx服务的启动管理的终端命令

nginx除了做http代理服务，其实也可以做缓存服务  **********
/var/cache/nginx    目录  nginx的缓存目录
/var/log/nginx   目录  nginx 的日志目录

nginx默认配置语法
user                设置nginx服务的系统使用用户
worker_processes    工作进程数                  //一般和系统核数相同
error_log           nginx的错误日志
pid                 nginx服务启动时候的pid
events  worker_connections  每个进程允许最大连接数（最大65535）   use 工作进程数

systemctl restart nginx.service  重启nginx（修改了配置文件）
systemctl reload nginx.service  重启nginx（修改了配置文件）

systemctl restart nginx.service 重启nginx  如果错误，一般是端口被占用
netstat -tpnul 看看端口被哪个进程占用   杀死进程，并重启就可以了

也可以systemctl reload nginx 重启

Nginx日志类型：
error.log  access_log

error.log  warn：代表错误级别
http 大括号下 配置access_log
log_format 为日志的信息，nginx变量  只能是在http模块下
access_log 后面的main 为log_format的格式

请求模拟： curl -v xxx(地址)
nginx -t -c （nginx的配置路径）  检查配置是否正确
nginx -s reload -c (nginx的配置路径) 重新加载配置，重启
nginx有自己的内置变量，在nginx的官网查看。
HTTP请求变量： arg_PARAMETER  http_HEADER sent_http_HEADER
内置变量： Nginx内置的
自定义变量： 自己定义

----------------------------------------------------Nginx模块学习--------------------------------------------
Nginx -V 可以看到配置了有哪些模块
1、--with-http_stub_status_module   Nginx的客户端状态
stub_status打开这个功能，在server,location下配置
location /mystatus {
    stub_status;
}
检查配置是否正确：nginx -tc /etc/nginx/nginx.conf
nginx -s reload -c /etc/nginx/nginx.conf
访问：http://118.24.61.194/mystatus
结果：
Active connections: 1   （nginx当前连接活跃数）
server accepts handled requests
4 4 3  （nginx处理的握手次数   连接数  请求数）
Reading: 0 Writing: 1 Waiting: 0

2、--with-http_random_index_module  目录中选择一个随机主页 （这个模块很少使用）
Syntax:random_index on | off
Default:random_index off
Context:location
配置：
location / {
#root   /usr/share/nginx/html;
root   /opt/app/code;  （这下面有多个文件，测试用的，刷新页面会随机展示不同的文件内容）
random_index on;
#index  index.html index.htm;
}

3、--with-http_sub_module HTTP内容替换 （这个模块一般也很少用）
Syntax:sub_filter string replacement
Default:-
Context:http,server,location

Syntax:sub_filter_last_modified on | off   (开关，文件有没有改变)
Default:sub_filter_last_modified off
Context:http,server,location

Syntax:sub_filter_once on | off   (开关，匹配所有html中内容的第一个还是所有)
Default:sub_filter_once on
Context:http,server,location

配置：
location / {
    root   /opt/app/code;
    index  index.html index.htm;
    {#sub_filter   '<a>imooc' '<a>IMOOC';(将<a>imooc 替换为 <a>IMOOC)#}   这些在配置中是需要的，暂时在这注释
}
结果：jeson at IMOOC jeson imooc  只替换了第一个内容

location / {
    root   /opt/app/code;
    index  index.html index.htm;
    {#sub_filter '<a>imooc' '<a>IMOOC';#}
        sub_filter_once off;  （全局性的替换）
}
结果：jeson at IMOOC jeson IMOOC  都替换了

4、Nginx的请求限制
连接频率限制  limit_conn_module
请求频率限制  limit_req_module

扩展知识：http协议是建立在tcp协议之上的
HTTP1.0 tcp不能复用
HTTP1.1 顺序性tcp复用
HTTP2.0 多路复用tcp复用

HTTP请求建立在一次TCP连接基础上
一次TCP请求至少产生一次HTTP请求

连接配置语法：
Syntax:limit_conn_zone key zone=name:size; （连接限制空间）
Default:-
Context:http

Syntax:limit_conn_zone zone number;  （限制并发的个数）
Default:-
Context:http,server,location

请求配置语法：
Syntax:limit_req_zone key zone=name:size rate=rate; （请求限制空间）
Default:-
Context:http

Syntax:limit_req zone=name [burst=number] [nodelay];
Default:-
Context:http,server,location

配置：
在server外：
limit_conn_zone $binanry_remote_addr zone=conn_zone:1m;
limit_req_zone $binanry_remote_addr zone=req_zone:1m rate=1r/s;  大小1M，数率每秒一个

压测：
ab -n 40 -c 20 http://118.24.61.194/1.html

Write errors:           0
Total transferred:      11360 bytes
HTML transferred:       6480 bytes
Requests per second:    5190.09 [#/sec] (mean)  （每秒完成5190.09个请求）
Time per request:       3.853 [ms] (mean)
Time per request:       0.193 [ms] (mean, across all concurrent requests)
Transfer rate:          1439.44 [Kbytes/sec] received

配置的不同情况：
location / {
    root   /opt/app/code;
    index  index.html index.htm;
    limit_req zone=req_zone;
}
压测：ab -n 40 -c 20 http://118.24.61.194/1.html
Complete requests:      40   （完成了40次）
Failed requests:        39    （失败了39次）

查看错误日志：tail -f /var/log/nginx/error.log
155 limiting requests, excess: 0.993 by zone "req_zone", client: 118.24.61.194, server: localhost, request: "GET /1.html HTTP/1.0", host: "118.24.61.194"
说明limit模块生效了，  ************

location / {
root   /opt/app/code;
index  index.html index.htm;
limit_req zone=req_zone burst=3 nodelay;  (burst=3) 3个请求延迟请求，超过访问速率，延迟请求对客户端起到访问限速的作用，其他的直接返回
}

压测：ab -n 40 -c 20 http://118.24.61.194/1.html
Complete requests:      40   （完成了40次）
Failed requests:        36    （失败了36次）


location / {
    root   /opt/app/code;
    index  index.html index.htm;
    limit_conn conn_zone 1;  （连接限制，服务端同一时刻只有一个连接过来）
}
压测：ab -n 40 -c 20 http://118.24.61.194/1.html
Complete requests:      40   （完成了40次）
Failed requests:        0    （失败了36次）

失败的次数为0或很少，得出连接的限制会小一些。因为多次的请求可以建立在一次的连接之上  ***********************


5、Nginx的访问控制
基于IP的访问控制   http_access_module
基于用户的信任登录  http_auth_basic_module

http_access_module:
Syntax:allow address |CIDR|unix:|all ;  (允许访问的)
Default:-
Context:http,server,location,limit_except

Syntax:deny address |CIDR|unix:|all ;  （拒绝访问的）
Default:-
Context:http,server,location,limit_except

www.ip138.com查看自己电脑的ip,查到自己的ip为222.211.213.142
配置：
location ~ ^/admin.html {  //模式匹配，访问xxx/admin.html 这样的
    root   /opt/app/code;
    deny   222.211.213.142; （自己的ip拒绝访问）
    allow  all;             （允许其他的ip来访问）
    index  index.html index.htm;
}


location ~ ^/admin.html {
    root   /opt/app/code;
    allow  222.211.213.0/24; （自己的ip允许访问） 这里是一个ip段
    deny  all;                （拒绝其他ip的访问）
    index  index.html index.htm;
}

6、http_access_module局限性
如果请求中间有如nginx的代理，那nginx中 remote_addr就不准确了，就为代理的ip

解决方法：
一、x_forwarded_for则会显示客户端，代理的ip地址  如：x_forwarded=IP1,IP2   可以被修改
二、结合geo模块作
三、通过HTTP自定义变量传递 *

7、http_auth_basic_module  基于用户的信任登录

Syntax:auth_basic string | off;
Default:auth_basic off;
Context:http,server,location,limit_except

Syntax:auth_basic_user_file file;  //文件为存储用户名登录信息  在nginx的官网中可以查看
Default:-;
Context:http,server,location,limit_except

生成密码文件：
安装htpasswd
htpasswd -c ./auth_conf caoyi  输入密码
得到这样的内容：caoyi:$apr1$TwndfK.E$ldCggPt6WGVsKMe12k/fm0

location ~ ^/admin.html {
    root   /opt/app/code;
    auth_basic "Auth access test!input your passward!";  //访问时会有弹出框 输入用户名和密码
    auth_basic_user_file /etc/nginx/auth_conf;           //用户名和密码的文件地址
    index  index.html index.htm;
}

缺点：
一、用户信息依赖文件方式
二、操作管理机械，效率低下

解决：
一、Nginx结合LUA实现高效验证
二、Nginx和LDAP打通，利用nginx-auth-ldap模块













