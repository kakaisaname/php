相同server_name多个虚拟主机优先级访问:
按照nginx配置文件的优先读取顺序

location匹配优先级：
=   进行普通字符精确匹配，也就是完全匹配
^~  表示普通字符匹配，使用前缀匹配
~ 和~* 表示执行一个正则匹配  ~区分大小写，~*不区分大小写

location = /code1/ {  //优先级最高
    rewrite ^(.*)$ /code1/index.html break;
}

location ~ /code.* { //优先级最低
    rewrite ^(.*)$ /code3/index.html break;
}

location ^~ /code {  //优先级次之
    rewrite ^(.*)$ /code2/index.html break;
}

Nginx的try_files的使用
按顺序检查文件是否存在

location / {
    try_files $uri $uri/ /index.php;    //首先检查$uri,没有检查$uri/ 下有没有文件，都没有访问 index.php
}

例子：
location / {
    root   /opt/app/code;
    try_files $uri /cache;   //未找到请求的文件，就去/opt/app/code/cache目录下找
}

Nginx的alias和root区别：
----root----
location /request_path/image/ {
    root /local_path/image/;
}
如果请求的路径为：http://www.test.com/request_path/image/cat.png
对应服务器的文件地址为： /local_path/image/request_path/image/cat.png

----alias----
location /request_path/image/ {
    alias /local_path/image/;
}
如果请求的路径为：http://www.test.com/request_path/image/cat.png
对应服务器的文件地址为： /local_path/image/cat.png

用什么样的方法传递用户的真实IP地址
用户-代理1-代理2。。。-后端服务
set x_real_ip=$remote_addr,每级代理都传

Nginx的常见错误码：
413：请求内容太大，用户上传文件限制
502:后端服务无响应
504：后端服务执行超时

Nginx的性能优化：
一、性能优化考虑点
1、当前系统结构瓶颈
    观察指标、压力测试  //top指令，日志,ab等查看
2、了解业务模式
    接口业务类型、系统层次化结构
3、性能与安全

二、ab接口压力测试工具
1、安装 yum install httpd-tools
ab -n 2000 -c 2 http://127.0.0.1/
-n 总的请求数
-c 并发数
-k 是否开启长连接

系统与Nginx的性能优化：
网络、系统、服务、程序、数据库、低层服务

文件句柄
    linux\Unix一切皆文件，文件句柄就是一个索引
    设置方式
    系统全局性修改、用户局部性修改、进程局部性修改（在nginx中 worker_rlimit_nofile 65535,大小自己设置，调到10000以上）

CPU亲和
    把进程通常不会在处理器之间频繁迁移进程，迁移的频率小，减少性能损耗
    nginx配置文件中
        worker_processes x; x代表启动多少个进程，和物理核数相同，一般
        worker_cpu_affinity  xxx(16进制);
        worker_cpu_affinity  auto; //nginx自动分配好

events {
    use epoll;
    worker_connections 10240; //每一个worker进程可以处理的连接
}

http中
    charset utf-8;  //字符集
    。。。

Nginx架构的安全篇
1、常见的恶意行为
    爬虫行为和恶意抓取、资源盗用
    基础防盗链功能-目的不让恶意用户能轻易的爬取网站对外数据
    secure_link_module 对数据安全性提高加密验证和失效性，适合如核心重要数据
    access_module 对后台、部分用户服务的数据提供IP防控
2、常见的应用层攻击手段
   后台密码撞库-通过猜测密码字典不断对后台系统登录性尝试，获取后台登录密码
        方法一、后台登录密码复杂度
        方法二、access_module 对后台提供IP防控
        方法三、预警机制 如：在某一段时间ip多次访问（可通过nginx+lua来监控）
    文件上传漏洞-利用这些可以上传的接口将恶意代码植入到服务器中，再通过url去访问以执行代码
    如：http://www.imooc.com/upload/1.jpg/1.php   1.jpg是可以执行的php代码
    解决：
    location ^~ /upload {
        root /opt/app/images;
        if ($request_filename ~*(.*)\.php) {  //以php结尾的，返回403
            return 403;
        }
    }
    SQL注入-利用未过滤、未审核用户输入的攻击方法，让应用运行本不应该运行的SQL代码
3、Nginx攻击策略
4、场景：Nginx+LUA的安全waf防火墙

Nginx + LUA 防火墙
https://github.com/loveshell/ngx_lua_waf  查看

定义Nginx在服务体系中的角色
1、静态资源服务
    浏览器缓存、防盗链、压缩、类型分类、流量限制、防资源盗用
2、代理服务
    正向代理、反向代理、代理缓存、LNMP、Poxypass、分片请求、负载均衡、头信息处理、协议类型
3、动静分离

设计评估：
    硬件:CPU、内存、硬盘
    系统：用户权限、日志目录存放
    关联服务：LVS、keepalive、syslog、Fastcgi

配置注意事项：
    合理配置、了解原理、关注日志








